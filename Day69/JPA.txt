기존에는 crud jpa 레파지토리

지금은 사용자 정의 레파지토리
- 인플이라는게 사용자정의 레파지토리이다
- 레파지토리 인터페이스 이름 + Impl 이라고 적어줘야한다 (클래스이름)

xml 형식 설정
<repositories base-package="japbook.japshop.repository" repository-impl-postfix="Impl"/>

java config 방식
@EnableJpaRepositoryes(basePackage="jpabook.jpashop.repository".
repositoryImplementationPostfix = "Impl")


특정 게시글을 수정하는 화면을 보여주려면 콘트롤러는 엔티티에서 들어온 id를 레파지토리를
이용해서 조회를 했었다
http://localhost:8080/articles/id=1/edit (이런식으로 url이 만들어짐)


이번에는 도메인클래스 컨버터를 만들어서 사용한다
OSIV 를 사용하지 않거나 사용할때 구분이 될수있다
OSIV란 Open Session In View jpa에서 데이터베이스를 연동할때 끝날때까지 영속성을 유지하는것
영속성 컨테스트란 jpa가 객체와 데이터베이스간에 메핑을수행하는 중간매개체이기 때문에
영속성을 가지는 객체를 추격하고 데이터베이스의 변경사항을 추격한다
지연로딩이 일어나는걸 해결할수있다
데이터베이스에 반영하려면 트렌젝션을 시작하는 서비스계층을 호출해야한다
요약하자면 세션이 닫혀서 더이상 jpa로 넘긴 데이터들이 중간에서 끊겨서 동작하지않을때
계층을 생각해보고 계층에 따라서 계층 구간에 끊어지지 않게 영속성을 유지해줄수있는 방법을
찾아서 유지해줘야 한다는것이다


저장프로시저
2가지로 나눌수있다
매개변수가 많을경우 1번을 사용하는것이 편하다
1. NamedStoredProcedureQuery를 이용하는 방법
- @NamedStoredProcedureQuery 어노테이션을 사용하여 프로시저를 정의 할 수 있다
- @StoredProcedureParameter 어노테이션을 사용하여 매개변수를 정의 할 수 있다
createNamedStoredProcedureQuery() 쿼리 객체를 생성하고 setParameter() 를 사용해서
매개변수를 설정한다
getResultList() 메서드를 호출해서 프로시저를 실행하고 결과를 받아온다 

예시)
/*
    @NamedStoredProcedureQueries({
            @NamedStoredProcedureQuery(
//                    name 은 해당 저장 프로시저에 대한 이름을 지정해준다
                    name = "procedure-name",
//                    procedureName 우리가 실행할 저장 프로시저의 이름을 저장해준다
                    procedureName = "stored-procedure-name",
//                    parameters 매개변수를 정의
                    parameters = {
                            @StoredProcedureParameter(mode = ParameterMode.IN, name = "parameter-name", type = String.class),
                            @StoredProcedureParameter(mode = ParameterMode.OUT, name = "result-name", type = Integer.class)
                    }
            )
    })
    */

    /*
//    Out을 여러개 줄수있다
    @NamedStoredProcedureQuery(
            name = "getEmployeeName",
            procedureName = "GET_EMPLOYEE_NAME",
            parameters = {
                    @StoredProcedureParameter(mode = ParameterMode.IN, name = "employeeName", type = String.class),
                    @StoredProcedureParameter(mode = ParameterMode.OUT, name = "employeeId", type = String.class),
                    @StoredProcedureParameter(mode = ParameterMode.OUT, name = "employeeSalary", type = BigDecimal.class)
            }
    )

     */

//    프로시저를 실행하기위해서 사용된다
//    사용하면 먼저 프로시저를 정의하고 그 프로시저를 호출하는 엔티티 클래스의 @NamedStoredProcedureQuery를 시용해서 등록해줘야한다
    @Procedure

    @Entity
    @NamedStoredProcedureQueries({
            @NamedStoredProcedureQuery(
            name = "getEmployeeName",
            procedureName = "GET_EMPLOYEE_NAME",
            parameters = {
                    @StoredProcedureParameter(mode = ParameterMode.IN, name = "employeeName", type = String.class),
                    @StoredProcedureParameter(mode = ParameterMode.OUT, name = "employeeId", type = String.class),
                    @StoredProcedureParameter(mode = ParameterMode.OUT, name = "employeeSalary", type = BigDecimal.class)
            })})
    
    public class MyEntity{
        @Procedure(name = "getEmployeeName")
        public int executeMyprocedure(String param1, int param2)
    }

2. EntityManager를 이용하는 방법
createNamedStoredProcedureQuery
registerStoredProcedureParameter() 메서드를 이용해서 프로시저 매개변수를 정의한다
getResultList() 메서드를 호출해서 프로시저를 실행하고 결과를 받아온다 

예시)
//    createStoredProcedureQuery 첫번째는 매개변수로 호출할이름 두번째는 결과집합 클래스를 시정한다
    StoredProcedureQuery query = entityManager.createStoredProcedureQuery("getAllEmplyees"), Employee.class);
//    registerStoredProcedureParameter 저장프로시저의 매개변수를 등록
    query.registerStoredProcedureParameter("employeeName", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("employeeId", Long.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("employeeName", String.class, ParameterMode.IN);
//    setParameter setParameter 의 입력매개변수의 입력값을 설정
    query.setParameter("employeeName", "아이유");
//    execute 저장프로시저를 실행 (데이터베이스의 exec)
    query.execute();
//    getOutputParameterValue 를 사용해서 출력매개변수를 가져온다
    Long employeeId = (Long) query.getOutputParameterValue("employeeId");
    BigDecimal employeeSalary = (BigDecimal) query.getOutputParameterValue("employeeSalary");
//    결과를 받을때
    List<Employee> employees = query.getResultList();







