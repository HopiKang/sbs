ORM(Object Relational Mapping)
- 객체 관계 맵핑
어플리케이션의 테이블을 맵핑(연결)한다는뜻

JPA(java persistence api)
- java진영에서 orm 기술표준으로 사용되는 인터페이스의 모음이다
- 구현된 클래스와 맵핑을 해주기 위해 사용되는 프레임워크이다
-어플리케이션과 JDBC사이에서 사용한다
-entity(객체), repository(저장소)
- 오픈소스 : hibernate


객체와 테이블 매핑 : @Entity, @Table
기본 키 매핑 : @Id
필드와 컬럼 매핍 : @Column
연관관계 매핍 : @ManyToOne, @JoinColumn

@Entity
- 테이블과의 매핑
- jpa가 관리함

final 클래스, enum, interface, inner 클래스는 사용할 수 없다


@table
entity와 매핑할 테이블, 생략시 entity 이름을 테이블 이름으로 사용한다
 
속성                     기능                                                                          기본값
name                    매핑할 테이블 이름                                                        엔티티 이름을 사용
catalog                  catalog 기능이 있는 데이터베이스에서는 catalog를 매핑한다
schema                  schema 기능이 있는 데이터베이스에서는 schema를 매핑한다

uniqueConstraints     DDL 생성시에 유니크 ㅔ약조건을 만드는데 2개 이상의 복합
                           유니크 제약조건도 만들수있다 참고로 이 기능은 스키마
                           자동 생성 기능을 사용해서 DDL을 만들때만 사용한다



옵션 		내용
create   		기존 테이블을 삭제하고 생성한다. DROP과 CREATE가 합쳐진것이다
create-drop     	create 속성에 추가로 어플리케이션을 종료할때 생성한 DDL을 제거한다 
update		데이터베이스 테이블과 엔티티 매핑정보를 비교해서 변경사항만 수정한다
validate         	데이터베이스 테이블과 엔티티 매핑정보를 비교해서 차이가 있으면 경고를 남기고
		어플리케이션을 실행하지 않습니다 이절정은 DDL을 수정하지 않는다
none 		자동생성기능을 사용하지 않으려면 hibernate.ddl-auto 속성 자체를 삭제하거나
		유효하지 않는 옵션 값을 주면된다


생성전략 2가지

1 직접할당
- 기본 키를 어플리케이션이 직접 할당준다
em.persist()를 호출하기 전에 어플리케이션에서 직접 식별자 값을 할당해야한다

2 자동생성
- 대리키를 상용하는 방식

아이덴티티는 데이터베이스에 위임한다